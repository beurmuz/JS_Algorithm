-- 저자 별 카테고리 별 매출액 집계하기 | X
-- ✅ 오랜만에 나온 테이블 3개 JOIN하기
-- 저자별, 카테고리별 => GROUP BY 순서를 저자, 카테고리로 입력하면 된다.
SELECT B.AUTHOR_ID, A.AUTHOR_NAME, B.CATEGORY, SUM(B.PRICE * S.SALES) AS TOTAL_SALES
FROM BOOK B
JOIN AUTHOR A ON B.AUTHOR_ID = A.AUTHOR_ID
JOIN BOOK_SALES S ON B.BOOK_ID = S.BOOK_ID
WHERE S.SALES_DATE LIKE "2022-01%"
GROUP BY AUTHOR_ID, CATEGORY 
ORDER BY B.AUTHOR_ID, B.CATEGORY DESC


-- 그룹별 조건에 맞는 식당 목록 출력하기 | O
-- ✅ TIP: 서브쿼리부터 작성하자!
SELECT M.MEMBER_NAME, R.REVIEW_TEXT, DATE_FORMAT(R.REVIEW_DATE, "%Y-%m-%d") AS REVIEW_DATE
FROM MEMBER_PROFILE M 
JOIN REST_REVIEW R
ON M.MEMBER_ID = R.MEMBER_ID
WHERE M.MEMBER_ID = (SELECT MEMBER_ID
                      FROM REST_REVIEW
                      GROUP BY MEMBER_ID
                      ORDER BY COUNT(MEMBER_ID) DESC 
                      LIMIT 1)
ORDER BY REVIEW_DATE, REVIEW_TEXT


-- 오프라인/온라인 판매 데이터 통합하기 | X
-- ✅ UNION: UNION을 이용하면 두 테이블을 각각 구한 후, 하나로 합칠 수 있다. (말 그대로 합집합)
SELECT DATE_FORMAT(SALES_DATE, "%Y-%m-%d") AS SALES_DATE, PRODUCT_ID, USER_ID, SALES_AMOUNT
FROM ONLINE_SALE AS N
WHERE SALES_DATE LIKE "2022-03%"
UNION
-- ✅ OFFLINE_SALE 테이블의 판매 데이터의 USER_ID 값은 NULL 로 표시 -> 항목값에 문자열로 'NULL'로 출력하라는 것이 아닌 NULL, 즉 빈칸으로 두라는 뜻
SELECT DATE_FORMAT(SALES_DATE, "%Y-%m-%d") AS SALES_DATE, PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT
FROM OFFLINE_SALE AS F
WHERE SALES_DATE LIKE "2022-03%"
ORDER BY SALES_DATE, PRODUCT_ID, USER_ID