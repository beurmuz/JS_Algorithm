-- 오랜 기간 보호한 동물(1) | X
-- ANIMAL_INS의 ID가 ANIMAL_OUTS의 ID에 포함되지 않는 경우 중 3개만 출력한다.
SELECT NAME, DATETIME
FROM ANIMAL_INS 
WHERE ANIMAL_ID NOT IN (SELECT ANIMAL_ID FROM ANIMAL_OUTS)
ORDER BY DATETIME
LIMIT 3;


-- 카테고리 별 도서 판매량 집계하기 | O
SELECT B.CATEGORY, SUM(S.SALES) AS TOTAL_SALES
FROM BOOK B JOIN BOOK_SALES S
ON B.BOOK_ID = S.BOOK_ID
WHERE S.SALES_DATE LIKE '2022-01%'
GROUP BY B.CATEGORY
ORDER BY B.CATEGORY


-- 있었는데요 없었습니다 | O
-- ✅ 날짜는 >,< 등의 부등호로 대소 비교가 가능하다. 
SELECT I.ANIMAL_ID, I.NAME
FROM ANIMAL_INS I JOIN ANIMAL_OUTS O
ON I.ANIMAL_ID = O.ANIMAL_ID
-- Out한 날짜가 In한 날짜보다 먼저라면
WHERE I.DATETIME > O.DATETIME
ORDER BY I.DATETIME


-- 오랜 기간 보호한 동물(2) | O
-- ✅ DATEDIFF를 이용해 날짜 차이를 구하고, 차이가 큰 순서대로 정렬한다.
SELECT O.ANIMAL_ID, O.NAME
FROM ANIMAL_OUTS O JOIN ANIMAL_INS I
ON O.ANIMAL_ID = I.ANIMAL_ID
ORDER BY DATEDIFF(O.DATETIME, I.DATETIME) DESC
LIMIT 2;


-- 조건별로 분류하여 주문상태 출력하기 | X
-- ✅ CASE문에는 WHEN과 THEN이 들어가야한다!!
SELECT ORDER_ID, 
       PRODUCT_ID, 
       DATE_FORMAT(OUT_DATE, '%Y-%m-%d') AS OUT_DATE,
       CASE
         WHEN DATEDIFF(OUT_DATE, '2022-05-01') <= 0 THEN "출고완료"
         WHEN DATEDIFF(OUT_DATE,'2022-05-01') > 0 THEN "출고대기"
         ELSE "출고미정"
       END AS "출고여부"
FROM FOOD_ORDER
ORDER BY ORDER_ID