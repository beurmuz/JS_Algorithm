"use strict";

/**
 * 나이트는 항상 오른쪽 방향으로 움직인다.
 * 이동 횟수가 5가지 미만 => 1~4중 마음대로 쓰기
 * 이동 횟수가 5가지 이상 => 1~4를 모두 최소 1번씩은 써야함
 *   - 이 경우 1~4를 모두 써야하는데, 나이트는 항상 오른쪽 방향으로 움직이니 오른쪽의 움직임을 최소화 하기 위해서는 2칸씩 움직이는 2, 3번은 한번만 이동하고, 나머지 1, 4번으로 반복해주면 된다.
 *
 * => 4가지 경우로 분류해서
 *   1. 세로 길이가 1일 때
 *   2. 세로 길이가 2일 때
 *   3. 세로 길이가 3 이상, 가로 길이 6이하일 때
 *   4. 나머지
 */
const [N, M] = require("fs")
  .readFileSync("/dev/stdin")
  .toString()
  .trim()
  .split(" ")
  .map((v) => +v);

const solution = (N, M) => {
  // 모든 이동은 시작 지점을 포함한다.

  // 1. 세로 길이가 1인 경우 -> 이동이 불가능하므로 1 출력
  if (N === 1) {
    return 1;
  } else if (N === 2) {
    // 2. 세로 길이가 2인 경우 -> 위, 아래로 한칸씩 밖에 못 움직임 -> 2, 3번의 경우만 가능
    return Math.min(4, parseInt((M + 1) / 2));
  } else {
    // 3-1. 세로가 3이상인 경우 -> 세로가 3이상이나 가로가 6보다 작으면 -> 최대로 움직일 시 1, 4번만 가능
    if (M <= 6) {
      // 이동 횟수가 4이상 ? -> 1-4번 중 최소 한번 이상은 옮겨야 하나 2, 3이 안되니 4와 두칸씩 옮긴 횟수와 비교해서 작은 값 대입
      return Math.min(4, M);
    } else {
      // 3-2. 세로 3이상, 가로 6이상일때 => 1-4번만 반복해주면 됨
      // 2, 3을 한번씩 하고 나면 오른쪽으로 두칸씩 이동한 것이 되므로 m-2하기
      return M - 2;
    }
  }
};

console.log(solution(N, M));
